[{"D:\\Reactjs\\emedfrontend\\src\\index.js":"1","D:\\Reactjs\\emedfrontend\\src\\App.js":"2","D:\\Reactjs\\emedfrontend\\src\\components\\Header.js":"3","D:\\Reactjs\\emedfrontend\\src\\components\\Year.js":"4","D:\\Reactjs\\emedfrontend\\src\\components\\Search.js":"5","D:\\Reactjs\\emedfrontend\\src\\components\\Main.js":"6","D:\\Reactjs\\emedfrontend\\src\\components\\Codenotes.js":"7","D:\\Reactjs\\emedfrontend\\src\\components\\NeoplasmTable.js":"8","D:\\Reactjs\\emedfrontend\\src\\components\\IndexTables.js":"9","D:\\Reactjs\\emedfrontend\\src\\components\\DrugTable.js":"10","D:\\Reactjs\\emedfrontend\\src\\components\\Codedet.js":"11","D:\\Reactjs\\emedfrontend\\src\\components\\Chapternotes.js":"12","D:\\Reactjs\\emedfrontend\\src\\components\\Sectionnotes.js":"13","D:\\Reactjs\\emedfrontend\\src\\components\\pagination.js":"14","D:\\Reactjs\\emedfrontend\\src\\components\\makeData.ts":"15"},{"size":269,"mtime":1689426636111,"results":"16","hashOfConfig":"17"},{"size":217,"mtime":1689590309262,"results":"18","hashOfConfig":"17"},{"size":904,"mtime":1689429473712,"results":"19","hashOfConfig":"17"},{"size":1701,"mtime":1689426636109,"results":"20","hashOfConfig":"17"},{"size":3735,"mtime":1689426636108,"results":"21","hashOfConfig":"17"},{"size":11836,"mtime":1689591639349,"results":"22","hashOfConfig":"17"},{"size":1175,"mtime":1689426636105,"results":"23","hashOfConfig":"17"},{"size":17399,"mtime":1689590309275,"results":"24","hashOfConfig":"17"},{"size":3579,"mtime":1689426636106,"results":"25","hashOfConfig":"17"},{"size":16297,"mtime":1689590973684,"results":"26","hashOfConfig":"17"},{"size":4046,"mtime":1689426636105,"results":"27","hashOfConfig":"17"},{"size":2164,"mtime":1689426636105,"results":"28","hashOfConfig":"17"},{"size":3953,"mtime":1689426636108,"results":"29","hashOfConfig":"17"},{"size":2049,"mtime":1689426636110,"results":"30","hashOfConfig":"17"},{"size":1594,"mtime":1689589557315,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"11lud8w",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"35"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"35"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"35"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"35"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Reactjs\\emedfrontend\\src\\index.js",[],[],[],"D:\\Reactjs\\emedfrontend\\src\\App.js",[],[],"D:\\Reactjs\\emedfrontend\\src\\components\\Header.js",["86"],[],"import React from \"react\";\r\nimport \"../styles/Header.css\";\r\nimport Search from \"./Search\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\n\r\nimport { Year } from \"./Year\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <div >\r\n      <Box sx={{ flexGrow: 1 }}>\r\n        <AppBar\r\n          className=\"navbar\"\r\n          position=\"static\"\r\n          sx={{\r\n            height: \"80px\",\r\n          }}\r\n        >\r\n          <Toolbar variant=\"dense\">\r\n            <img\r\n              className=\"logo\"\r\n              src=\"https://static.wixstatic.com/media/7607b5_dbdbad3954b74cd0b66694c3302204e0~mv2.png/v1/fill/w_275,h_40,al_c,q_85,usm_0.66_1.00_0.01,enc_auto/EMEDLOGIX_Final-01.png\"\r\n            ></img>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Box>\r\n      <Year />\r\n \r\n      <Search/>\r\n     \r\n    </div>\r\n  );\r\n};\r\n","D:\\Reactjs\\emedfrontend\\src\\components\\Year.js",[],[],"D:\\Reactjs\\emedfrontend\\src\\components\\Search.js",["87"],[],"import { Autocomplete, Box, IconButton, Stack, TextField } from \"@mui/material\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport \"../App.css\";\r\nimport { Main } from \"./Main\";\r\nconst Search = () => {\r\n  const [result, setResult] = useState([]);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [first, setFirst] = useState(\"\");\r\n  const [word, setWord] = useState(\"\");\r\n  const [isValueSelected, setIsValueSelected] = useState(false);\r\n  function handleChange(e) {\r\n    setWord(e.target.value);\r\n  }\r\n  console.log(word);\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (word) {\r\n          const response = await fetch(`/codes/${word}/matches`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResult(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        } else {\r\n          setResult([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [word]);\r\n  console.log(\"our result is\", result);\r\n  console.log(first);\r\n  global.values = first;\r\n  console.log(global.values && global.values.code);\r\n  console.log(word);\r\n  global.words=word;\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          height: \"80px\",\r\n          position: \"static\",\r\n          marginTop:\"-5px\"\r\n        }}\r\n      >\r\n        <Stack\r\n          sx={{ margin: \"auto\", color: \"black\", mt: \"20px\" }}\r\n          direction={\"row\"}\r\n          gap={5}\r\n        >\r\n          <Fragment>\r\n            <Autocomplete\r\n              id=\"users\"\r\n              defaultValue={null}\r\n              getOptionLabel={(result) => `${result.id} ${result.description}`}\r\n              options={result}\r\n              sx={{\r\n                width: \"1450px\",\r\n                backgroundColor: \"white\",\r\n                mt: \"14px\",\r\n                ml: \"130px\",\r\n                display: \"inline-block\",\r\n                \"& input\": {\r\n                  height: \"5px\",\r\n                  bgcolor: \"background.paper\",\r\n                  color: (theme) =>\r\n                    theme.palette.getContrastText(\r\n                      theme.palette.background.paper\r\n                    ),\r\n                },\r\n              }}\r\n              isoptionequalToValue={(option, value) =>\r\n                option.description === value.description\r\n              }\r\n              noOptionsText={\"PLEASE ENTER VALID CODES\"}\r\n              open={open}\r\n              onInputChange={(_, value) => {\r\n                if (value.length === 0) {\r\n                  if (open) setOpen(false);\r\n                } else {\r\n                  if (!open) setOpen(true);\r\n                }\r\n              }}\r\n              onClose={() => setOpen(false)}\r\n              popupIcon={\r\n                <SearchIcon sx={{ \"&:hover\": { background: \"none\" } }} />\r\n              }\r\n              onChange={(event, newValue) => {\r\n                setFirst(newValue);\r\n                setIsValueSelected(true);\r\n              }}\r\n              autoSelect\r\n              renderOption={(props, result) => (\r\n                <Box {...props} key={result.id}>\r\n                  {result.id} {result.description}\r\n                </Box>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Search for code\"\r\n                />\r\n              )}\r\n            />\r\n          </Fragment>\r\n        </Stack>\r\n      </Box>\r\n      <Main isValueSelected={isValueSelected} />\r\n    </>\r\n  );\r\n};\r\nexport default Search;","D:\\Reactjs\\emedfrontend\\src\\components\\Main.js",[],[],"D:\\Reactjs\\emedfrontend\\src\\components\\Codenotes.js",["88"],[],"import React, { useEffect, useState } from \"react\";\r\nconst Codenotes = () => {\r\n  const [results, setResults] = useState(null);\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (global.values && global.values.code && global.years) {\r\n          const response = await fetch(`/codes/${global.values.code}/details/?version=${global.years}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResults(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values]);\r\n  console.log(\"our result is\", results);\r\n  return (\r\n    <div className=\"codenotes\">\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr></tr>\r\n          </thead>\r\n          <tbody>\r\n            {results && results.code && (\r\n              <tr key={results.code}>\r\n                <td>{results.longDescription}</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Codenotes;","D:\\Reactjs\\emedfrontend\\src\\components\\NeoplasmTable.js",["89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105"],[],"D:\\Reactjs\\emedfrontend\\src\\components\\IndexTables.js",["106","107","108","109","110","111"],[],"import React, { Fragment, useState } from 'react'\r\nimport \"../styles/Pagination.css\";\r\nimport { Autocomplete, Box, TextField } from '@mui/material';\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n\r\nconst IndexTables = () => {\r\n    const items = [\r\n        \"0-9\",\r\n        \"A\",\r\n        \"B\",\r\n        \"C\",\r\n        \"D\",\r\n        \"E\",\r\n        \"F\",\r\n        \"G\",\r\n        \"H\",\r\n        \"I\",\r\n        \"J\",\r\n        \"K\",\r\n        \"L\",\r\n        \"M\",\r\n        \"N\",\r\n        \"O\",\r\n        \"P\",\r\n        \"R\",\r\n        \"S\",\r\n        \"T\",\r\n        \"U\",\r\n        \"V\",\r\n        \"W\",\r\n        \"X\",\r\n        \"Y\",\r\n        \"Z\",\r\n      ];\r\n      const [selectedAlphabet, setSelectedAlphabet] = useState(null);\r\n    \r\n      const handleClick = (alphabet) => {\r\n        setSelectedAlphabet(alphabet);\r\n      \r\n        console.log(\"Selected alphabet:\", alphabet);\r\n        global.alphabets=alphabet;\r\n        console.log(global.alphabets);\r\n      };\r\n      const [result, setResult] = useState([]);\r\n      const [open, setOpen] = React.useState(false);\r\n      const [first, setFirst] = useState(\"\");\r\n      const [word, setWord] = useState(\"\");\r\n      const [isValueSelected, setIsValueSelected] = useState(false);\r\n      function handleChange(e) {\r\n        setWord(e.target.value);\r\n      } \r\n  return (\r\n    <div>\r\n    <div className=\"center\">\r\n      <div className=\"pagination\">\r\n        {items.map((item, index) => (\r\n          <a key={index} onClick={() => handleClick(item)}>\r\n            {item}\r\n          </a>\r\n        ))}\r\n      </div>\r\n    </div>\r\n    <Fragment>\r\n            <Autocomplete\r\n              id=\"users\"\r\n              defaultValue={null}\r\n              getOptionLabel={(result) => `${result.id} ${result.description}`}\r\n          options={result}\r\n              sx={{\r\n                width: \"140px\",\r\n                backgroundColor: \"white\",\r\n                mt: \"14px\",\r\n                ml: \"4px\",\r\n                display: \"inline-block\",\r\n                \"& input\": {\r\n                  height: \"5px\",\r\n                  bgcolor: \"background.paper\",\r\n                  color: (theme) =>\r\n                    theme.palette.getContrastText(\r\n                      theme.palette.background.paper\r\n                    ),\r\n                },\r\n              }}\r\n              isoptionequalToValue={(option, value) =>\r\n                option.description === value.description\r\n              }\r\n              noOptionsText={\"PLEASE ENTER VALID CODES\"}\r\n              open={open}\r\n              onInputChange={(_, value) => {\r\n                if (value.length === 0) {\r\n                  if (open) setOpen(false);\r\n                } else {\r\n                  if (!open) setOpen(true);\r\n                }\r\n              }}\r\n              onClose={() => setOpen(false)}\r\n              popupIcon={\r\n                <SearchIcon sx={{ marginLeft:\"60px\" }} />\r\n              }\r\n              onChange={(event, newValue) => {\r\n                setFirst(newValue);\r\n                setIsValueSelected(true);\r\n              }}\r\n              autoSelect\r\n              renderOption={(props, result) => (\r\n                <Box {...props} key={result.id}>\r\n                  {result.id} {result.description}\r\n                </Box>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  onChange={handleChange}\r\n                  placeholder=\"filter\"\r\n                />\r\n              )}\r\n            />\r\n          </Fragment>\r\n    <div>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IndexTables;","D:\\Reactjs\\emedfrontend\\src\\components\\DrugTable.js",["112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129"],[],"D:\\Reactjs\\emedfrontend\\src\\components\\Codedet.js",["130"],[],"import { Close } from \"@mui/icons-material\";\r\nimport { Button } from \"@mui/material\";\r\nimport \"../App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nconst Codedet = () => {\r\n  const [result, setResult] = useState(null);\r\n  const [isClosed, setIsClosed] = useState(false);\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (global.values && global.values.code && global.years) {\r\n          const response = await fetch(`/codes/${global.values.code}/details/?version=${global.years}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResult(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values]);\r\n  const handleClose = () => {\r\n    setIsClosed(true);\r\n    window.location.reload();\r\n  };\r\n  console.log(\"our result is\", result);\r\n  return (\r\n    <div className=\"division\">\r\n      {!isClosed && global.values && global.values.code && (\r\n        <div>\r\n          <div>\r\n            <Button\r\n              disableFocusRipple\r\n              disableRipple\r\n              sx={{\r\n                border: \"0.5px solid green\",\r\n                textAlign: \"center\",\r\n                height: \"20px\",\r\n                width: \"80px\",\r\n                backgroundColor: \"#ADD8E6\",\r\n                marginLeft: \"125px\",\r\n              }}\r\n            >\r\n              {global.values.code}\r\n              <Close\r\n                sx={{\r\n                  width: \"20px\",\r\n                  ml: \"5px\",\r\n                  color: \"#4169E1\",\r\n                }}\r\n                onClick={handleClose}\r\n              />\r\n            </Button>\r\n          </div>\r\n          <table>\r\n            <thead>\r\n              <tr></tr>\r\n            </thead>\r\n            <tbody>\r\n              {result && (\r\n                <tr key={result.code}>\r\n                  <td>{result.code}</td>\r\n                  <td>{result.longDescription}</td>\r\n                  <td>\r\n                    {result.billable === true ? (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        sx={{\r\n                          width: \"150px\",\r\n                          height: \"15px\",\r\n                          color: \"white\",\r\n                          fontFamily: \"sans-serif\",\r\n                          ml: \"20px\",\r\n                          backgroundColor: \"green\",\r\n                          textTransform: \"lowercase\",\r\n                          fontWeight: \"700px\",\r\n                          textAlign: \"center\",\r\n                          \"&:hover\": {\r\n                            backgroundColor: \"green\",\r\n                          },\r\n                        }}\r\n                      >\r\n                        Billable Codes\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disableElevation\r\n                        disableFocusRipple\r\n                        sx={{\r\n                          width: \"150px\",\r\n                          height: \"15px\",\r\n                          color: \"white\",\r\n                          fontFamily: \"sans-serif\",\r\n                          ml: \"170px\",\r\n                          backgroundColor: \"orange\",\r\n                          textTransform: \"lowercase\",\r\n                          fontWeight: \"700px\",\r\n                          textAlign: \"center\",\r\n                          \"&:hover\": {\r\n                            backgroundColor: \"orange\",\r\n                          },\r\n                        }}\r\n                      >\r\n                        NonBillable Codes\r\n                      </Button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Codedet;\r\n","D:\\Reactjs\\emedfrontend\\src\\components\\Chapternotes.js",["131","132"],[],"\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\nconst Chapternotes = () => {\r\n  const [results, setResults] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (global.values && global.values.code && global.years) {\r\n          const response = await fetch(`/codes/${global.values.code}/details/?version=${global.years}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResults(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values.code]);\r\n\r\n  console.log(\"our result is\", results);\r\n  const shouldDisplayClassification = (classification, index) => {\r\n    if (index === 0) {\r\n      return true;\r\n    }\r\n    const previousClassifications = results.chapter.notes\r\n      .slice(0, index)\r\n      .map((note) => note.classification);\r\n    return !previousClassifications.includes(classification);\r\n  };\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          marginTop: \"50px\",\r\n        }}\r\n      >\r\n     \r\n            {results && results.chapter && results.chapter.description ? (\r\n  <div key={results.code}>\r\n    <div style={{ marginLeft: \"17px\" }}>{results.chapter.description}</div>\r\n  </div>\r\n) : (\r\n  <div></div>\r\n)}\r\n        \r\n     \r\n            {results && results.chapter && results.chapter.notes ? (\r\n  results.chapter.notes\r\n    .sort((a, b) => a.classification.localeCompare(b.classification))\r\n    .map((note, index) => (\r\n      <div key={index}>\r\n        {index === 0 ||\r\n        note.classification !== results.chapter.notes[index - 1].classification ? (\r\n          <div style={{ padding: \"10px 20px 20px 20px\" }}>\r\n            <strong>{note.classification.toUpperCase()}</strong>:&nbsp;&nbsp;\r\n            {note.notes}\r\n          </div>\r\n        ) : (\r\n          <div style={{ marginLeft: \"110px\" }}>{note.notes}</div>\r\n        )}\r\n      </div>\r\n    ))\r\n) : (\r\n  <div>No chapter notes</div>\r\n)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chapternotes;","D:\\Reactjs\\emedfrontend\\src\\components\\Sectionnotes.js",["133"],[],"\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"../styles/Sectionnotes.css\";\r\nconst Sectionnotes = () => {\r\n  const [results, setResults] = useState(null);\r\n  const [globalValuesCode, setGlobalValuesCode] = useState(null);\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (globalValuesCode && global.years) {\r\n          const response = await fetch(\r\n            `/codes/${globalValuesCode}/details/?version=${global.years}`\r\n          );\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResults(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [globalValuesCode]);\r\n  useEffect(() => {\r\n    if (global.values) {\r\n      setGlobalValuesCode(global.values.code);\r\n    }\r\n  }, [global.values]);\r\n  console.log(\"our result is\", results);\r\n  return (\r\n    <div className=\"section\">\r\n      <div>\r\n        <table>\r\n          <tbody className=\"chapter\">\r\n            {results && results.section && results.section.notes ? (\r\n              results.section.notes.map((note, index) => (\r\n                <tr key={index}>\r\n                  <td>{note.notes}</td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td>No Section notes</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n        {globalValuesCode === \"H548\" && results?.section?.visualImpairment ? (\r\n          <table className=\"table1\" cellSpacing={0}>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"tablees\" rowSpan=\"2\">\r\n                  {results.section.visualImpairment.categoryHeading}\r\n                </th>\r\n                <th className=\"tablees\" colSpan=\"2\">\r\n                  {results.section.visualImpairment.rangeHeading}\r\n                </th>\r\n              </tr>\r\n              <tr>\r\n                <th className=\"tablees\">\r\n                  {results.section.visualImpairment.maxHeading}\r\n                </th>\r\n                <th className=\"tablees\">\r\n                  {results.section.visualImpairment.minHeading}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {results.section.visualImpairment.categoriesList.map(\r\n                (category, categoryIndex) => (\r\n                  <React.Fragment key={categoryIndex}>\r\n                    {category.value &&\r\n                      category.visRangeList &&\r\n                      category.visRangeList.some(\r\n                        (range) => range.max || range.min\r\n                      ) && (\r\n                        <>\r\n                          {category.visRangeList.map(\r\n                            (range, rangeIndex) =>\r\n                              (range.max || range.min) && (\r\n                                <tr key={`${categoryIndex}-${rangeIndex}`}>\r\n                                  {rangeIndex === 0 && (\r\n                                    <td\r\n                                      className=\"tablees category-number\"\r\n                                      rowSpan={category.visRangeList.length}\r\n                                    >\r\n                                      {category.value}\r\n                                    </td>\r\n                                  )}\r\n                                  <td className=\"tablees\">{range.max}</td>\r\n                                  <td className=\"tablees\">{range.min}</td>\r\n                                </tr>\r\n                              )\r\n                          )}\r\n                        </>\r\n                      )}\r\n                  </React.Fragment>\r\n                )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Sectionnotes;\r\n","D:\\Reactjs\\emedfrontend\\src\\components\\pagination.js",["134","135","136"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/Pagination.css\";\r\n\r\nexport const Pagin = () => {\r\n  const items = [\r\n    \"0-9\",\r\n    \"A\",\r\n    \"B\",\r\n    \"C\",\r\n    \"D\",\r\n    \"E\",\r\n    \"F\",\r\n    \"G\",\r\n    \"H\",\r\n    \"I\",\r\n    \"J\",\r\n    \"K\",\r\n    \"L\",\r\n    \"M\",\r\n    \"N\",\r\n    \"O\",\r\n    \"P\",\r\n    \"R\",\r\n    \"S\",\r\n    \"T\",\r\n    \"U\",\r\n    \"V\",\r\n    \"W\",\r\n    \"X\",\r\n    \"Y\",\r\n    \"Z\",\r\n  ];\r\n  const [selectedAlphabet, setSelectedAlphabet] = useState(null);\r\n\r\n  const handleClick = (alphabet) => {\r\n    setSelectedAlphabet(alphabet);\r\n  \r\n    console.log(\"Selected alphabet:\", alphabet);\r\n    global.alphabets=alphabet;\r\n    console.log(global.alphabets);\r\n  };\r\n const [result, setResult] = useState(null);\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        \r\n          const response = await fetch(`/codes/${global.words}/index?filterBy=${global.alphabets}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResult(data);\r\n          }\r\n           else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.alphabets]);\r\n  console.log(\"our result is\", result);\r\n\r\n\r\n  \r\n\r\n \r\n\r\n  return (\r\n    <div>\r\n      <div className=\"center\">\r\n        <div className=\"pagination\">\r\n          {items.map((item, index) => (\r\n            <a key={index} onClick={() => handleClick(item)}>\r\n              {item}\r\n            </a>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n      \r\n        \r\n        {\r\n             result &&   result.map((addmovie) => {\r\n                   return (\r\n                        <tr key={addmovie.title}>\r\n                            <td >{addmovie.title}</td>\r\n                        <td>{addmovie.code}</td>\r\n                        </tr> \r\n                     \r\n                  \r\n  \r\n                    )\r\n               })\r\n           }\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n","D:\\Reactjs\\emedfrontend\\src\\components\\makeData.ts",[],[],{"ruleId":"137","severity":1,"message":"138","line":22,"column":13,"nodeType":"139","endLine":25,"endColumn":14},{"ruleId":"140","severity":1,"message":"141","line":1,"column":29,"nodeType":"142","messageId":"143","endLine":1,"endColumn":39},{"ruleId":"144","severity":1,"message":"145","line":21,"column":6,"nodeType":"146","endLine":21,"endColumn":21,"suggestions":"147"},{"ruleId":"140","severity":1,"message":"148","line":281,"column":10,"nodeType":"142","messageId":"143","endLine":281,"endColumn":22},{"ruleId":"140","severity":1,"message":"149","line":284,"column":8,"nodeType":"142","messageId":"143","endLine":284,"endColumn":18},{"ruleId":"150","severity":1,"message":"151","line":290,"column":5,"nodeType":"152","messageId":"153","endLine":290,"endColumn":20},{"ruleId":"140","severity":1,"message":"154","line":313,"column":10,"nodeType":"142","messageId":"143","endLine":313,"endColumn":15},{"ruleId":"144","severity":1,"message":"155","line":335,"column":6,"nodeType":"146","endLine":335,"endColumn":27,"suggestions":"156"},{"ruleId":"140","severity":1,"message":"157","line":337,"column":10,"nodeType":"142","messageId":"143","endLine":337,"endColumn":16},{"ruleId":"140","severity":1,"message":"158","line":337,"column":18,"nodeType":"142","messageId":"143","endLine":337,"endColumn":27},{"ruleId":"140","severity":1,"message":"159","line":338,"column":10,"nodeType":"142","messageId":"143","endLine":338,"endColumn":14},{"ruleId":"140","severity":1,"message":"160","line":338,"column":16,"nodeType":"142","messageId":"143","endLine":338,"endColumn":23},{"ruleId":"140","severity":1,"message":"161","line":339,"column":10,"nodeType":"142","messageId":"143","endLine":339,"endColumn":15},{"ruleId":"140","severity":1,"message":"162","line":339,"column":17,"nodeType":"142","messageId":"143","endLine":339,"endColumn":25},{"ruleId":"140","severity":1,"message":"163","line":340,"column":10,"nodeType":"142","messageId":"143","endLine":340,"endColumn":14},{"ruleId":"140","severity":1,"message":"164","line":341,"column":10,"nodeType":"142","messageId":"143","endLine":341,"endColumn":25},{"ruleId":"140","severity":1,"message":"165","line":341,"column":27,"nodeType":"142","messageId":"143","endLine":341,"endColumn":45},{"ruleId":"140","severity":1,"message":"166","line":343,"column":12,"nodeType":"142","messageId":"143","endLine":343,"endColumn":24},{"ruleId":"150","severity":1,"message":"167","line":421,"column":29,"nodeType":"152","messageId":"153","endLine":421,"endColumn":35},{"ruleId":"150","severity":1,"message":"167","line":432,"column":29,"nodeType":"152","messageId":"153","endLine":432,"endColumn":35},{"ruleId":"140","severity":1,"message":"168","line":35,"column":14,"nodeType":"142","messageId":"143","endLine":35,"endColumn":30},{"ruleId":"140","severity":1,"message":"158","line":44,"column":22,"nodeType":"142","messageId":"143","endLine":44,"endColumn":31},{"ruleId":"140","severity":1,"message":"161","line":46,"column":14,"nodeType":"142","messageId":"143","endLine":46,"endColumn":19},{"ruleId":"140","severity":1,"message":"163","line":47,"column":14,"nodeType":"142","messageId":"143","endLine":47,"endColumn":18},{"ruleId":"140","severity":1,"message":"164","line":48,"column":14,"nodeType":"142","messageId":"143","endLine":48,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":57,"column":11,"nodeType":"139","endLine":57,"endColumn":60},{"ruleId":"140","severity":1,"message":"148","line":252,"column":10,"nodeType":"142","messageId":"143","endLine":252,"endColumn":22},{"ruleId":"140","severity":1,"message":"149","line":256,"column":8,"nodeType":"142","messageId":"143","endLine":256,"endColumn":18},{"ruleId":"140","severity":1,"message":"171","line":257,"column":10,"nodeType":"142","messageId":"143","endLine":257,"endColumn":17},{"ruleId":"150","severity":1,"message":"151","line":265,"column":5,"nodeType":"152","messageId":"153","endLine":265,"endColumn":20},{"ruleId":"140","severity":1,"message":"154","line":291,"column":10,"nodeType":"142","messageId":"143","endLine":291,"endColumn":15},{"ruleId":"144","severity":1,"message":"155","line":313,"column":6,"nodeType":"146","endLine":313,"endColumn":27,"suggestions":"172"},{"ruleId":"140","severity":1,"message":"157","line":315,"column":10,"nodeType":"142","messageId":"143","endLine":315,"endColumn":16},{"ruleId":"140","severity":1,"message":"158","line":315,"column":18,"nodeType":"142","messageId":"143","endLine":315,"endColumn":27},{"ruleId":"140","severity":1,"message":"159","line":316,"column":10,"nodeType":"142","messageId":"143","endLine":316,"endColumn":14},{"ruleId":"140","severity":1,"message":"160","line":316,"column":16,"nodeType":"142","messageId":"143","endLine":316,"endColumn":23},{"ruleId":"140","severity":1,"message":"161","line":317,"column":10,"nodeType":"142","messageId":"143","endLine":317,"endColumn":15},{"ruleId":"140","severity":1,"message":"162","line":317,"column":17,"nodeType":"142","messageId":"143","endLine":317,"endColumn":25},{"ruleId":"140","severity":1,"message":"163","line":318,"column":10,"nodeType":"142","messageId":"143","endLine":318,"endColumn":14},{"ruleId":"140","severity":1,"message":"164","line":320,"column":10,"nodeType":"142","messageId":"143","endLine":320,"endColumn":25},{"ruleId":"140","severity":1,"message":"165","line":320,"column":27,"nodeType":"142","messageId":"143","endLine":320,"endColumn":45},{"ruleId":"140","severity":1,"message":"166","line":321,"column":12,"nodeType":"142","messageId":"143","endLine":321,"endColumn":24},{"ruleId":"150","severity":1,"message":"167","line":408,"column":29,"nodeType":"152","messageId":"153","endLine":408,"endColumn":35},{"ruleId":"150","severity":1,"message":"167","line":419,"column":29,"nodeType":"152","messageId":"153","endLine":419,"endColumn":35},{"ruleId":"144","severity":1,"message":"145","line":28,"column":6,"nodeType":"146","endLine":28,"endColumn":21,"suggestions":"173"},{"ruleId":"144","severity":1,"message":"174","line":25,"column":6,"nodeType":"146","endLine":25,"endColumn":26,"suggestions":"175"},{"ruleId":"140","severity":1,"message":"176","line":28,"column":9,"nodeType":"142","messageId":"143","endLine":28,"endColumn":36},{"ruleId":"144","severity":1,"message":"145","line":32,"column":6,"nodeType":"146","endLine":32,"endColumn":21,"suggestions":"177"},{"ruleId":"140","severity":1,"message":"168","line":33,"column":10,"nodeType":"142","messageId":"143","endLine":33,"endColumn":26},{"ruleId":"144","severity":1,"message":"178","line":61,"column":6,"nodeType":"146","endLine":61,"endColumn":24,"suggestions":"179"},{"ruleId":"169","severity":1,"message":"170","line":74,"column":13,"nodeType":"139","endLine":74,"endColumn":62},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'global.values'. Either exclude it or remove the dependency array. Outer scope values like 'global.values' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["180"],"'Autocomplete' is defined but never used.","'SearchIcon' is defined but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","'codes' is assigned a value but never used.","React Hook React.useEffect has an unnecessary dependency: 'global.values.code'. Either exclude it or remove the dependency array. Outer scope values like 'global.values.code' aren't valid dependencies because mutating them doesn't re-render the component.",["181"],"'result' is assigned a value but never used.","'setResult' is assigned a value but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'first' is assigned a value but never used.","'setFirst' is assigned a value but never used.","'word' is assigned a value but never used.","'isValueSelected' is assigned a value but never used.","'setIsValueSelected' is assigned a value but never used.","'handleChange' is defined but never used.","Duplicate key 'height'.","'selectedAlphabet' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'Padding' is defined but never used.",["182"],["183"],"React Hook useEffect has an unnecessary dependency: 'global.values.code'. Either exclude it or remove the dependency array. Outer scope values like 'global.values.code' aren't valid dependencies because mutating them doesn't re-render the component.",["184"],"'shouldDisplayClassification' is assigned a value but never used.",["185"],"React Hook useEffect has an unnecessary dependency: 'global.alphabets'. Either exclude it or remove the dependency array. Outer scope values like 'global.alphabets' aren't valid dependencies because mutating them doesn't re-render the component.",["186"],{"desc":"187","fix":"188"},{"desc":"187","fix":"189"},{"desc":"187","fix":"190"},{"desc":"187","fix":"191"},{"desc":"187","fix":"192"},{"desc":"187","fix":"193"},{"desc":"187","fix":"194"},"Update the dependencies array to be: []",{"range":"195","text":"196"},{"range":"197","text":"196"},{"range":"198","text":"196"},{"range":"199","text":"196"},{"range":"200","text":"196"},{"range":"201","text":"196"},{"range":"202","text":"196"},[688,703],"[]",[9930,9951],[10324,10345],[850,865],[699,719],[934,949],[1233,1251]]