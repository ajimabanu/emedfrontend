{"ast":null,"code":"var _jsxFileName = \"D:\\\\Reactjs\\\\emedfrontend\\\\src\\\\components\\\\NeoplasmTable.js\",\n  _s = $RefreshSig$();\n/*\r\nimport * as React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\n\r\nimport { Autocomplete, Box, Stack, TextField, Typography } from \"@mui/material\";\r\nimport { Pagin } from \"./pagination\";\r\nimport { Fragment } from \"react\";\r\nimport { useState } from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\nbackgroundColor:\"#90B2D8\",\r\nheight:1\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    height:1\r\n  },\r\n}));\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:nth-of-type(odd)\": {\r\n    backgroundColor: theme.palette.action.hover,\r\n    height:1\r\n  },\r\n  // hide last border\r\n  \"&:last-child td, &:last-child th\": {\r\n    border: 0,\r\n    height:1\r\n  },\r\n}));\r\n\r\n\r\nexport default function NeoplasmTable() {\r\n  console.log(\"neo enter\");\r\n  console.log(global.values.code);\r\n  const [neo, setNeo] = useState(null);\r\n  const [codes, setCodes] = useState([]);\r\n  React.useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try  {\r\n        if (global.values && global.values.code) {\r\n          const response = await fetch(`/codes/${global.values.code}/neoplasm`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setNeo(data);\r\n            const codeValues = global.values.code.split(\",\");\r\n            setCodes(codeValues);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }else {\r\n          console.error(\"Failed to fetch data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values.code]);\r\n  console.log(\"our neo is\", neo);\r\n  const [result, setResult] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [first, setFirst] = useState(\"\");\r\n  const [word, setWord] = useState(\"\");\r\n  const [isValueSelected, setIsValueSelected] = useState(false);\r\n  function handleChange(e) {\r\n    setWord(e.target.value);\r\n  }\r\n  return (\r\n    <>\r\n    <Box\r\n              sx={{\r\n                height: \"20px\",\r\n                width: \"100%\",\r\n                textAlign: \"left\",\r\n                mt: \"200px\",\r\n                ml: \"10px\",\r\n              }}\r\n            >\r\n             <Pagin/>    \r\n            </Box>\r\n      <TableContainer\r\n        sx={{\r\n          mt: \"60px\",\r\n          display: \"flex\",\r\n          position: \"absolute\",\r\n          width: \"830px\",\r\n          ml: \"-115px\",\r\n          height: \"400px\",\r\n          overflowY:\"scroll\"\r\n          \r\n        }}\r\n      >\r\n        <Table sx={{ minWidth: \"100px\", height: \"450px\" }}>\r\n          <TableHead>\r\n            <TableRow>\r\n\r\n\r\n            <div >\r\n     \r\n     <div className=\"table\">\r\n       <Box\r\n         sx={{\r\n           width: \"100px\",\r\n           height: \"20%\",\r\n        \r\n         }}\r\n       >\r\n         <Stack direction={\"row\"}>\r\n         <Box>\r\n            <Autocomplete\r\n              id=\"users\"\r\n              defaultValue={null}\r\n              getOptionLabel={(result) => `${result.id} ${result.description}`}\r\n          options={result}\r\n              sx={{\r\n                width: \"150px\",\r\n                backgroundColor: \"white\",\r\n                mt: \"0.5px\",\r\n                ml: \"0.1px\",\r\n                display: \"inline-block\",\r\n                \"& input\": {\r\n                  height: \"5px\",\r\n                  bgcolor: \"background.paper\",\r\n                  color: (theme) =>\r\n                    theme.palette.getContrastText(\r\n                      theme.palette.background.paper\r\n                    ),\r\n                },\r\n              }}\r\n              isoptionequalToValue={(option, value) =>\r\n                option.description === value.description\r\n              }\r\n              noOptionsText={\"PLEASE ENTER VALID CODES\"}\r\n              open={open}\r\n              onInputChange={(_, value) => {\r\n                if (value.length === 0) {\r\n                  if (open) setOpen(false);\r\n                } else {\r\n                  if (!open) setOpen(true);\r\n                }\r\n              }}\r\n              onClose={() => setOpen(false)}\r\n              popupIcon={\r\n                <SearchIcon sx={{ marginLeft:\"60px\" }} />\r\n              }\r\n              onChange={(event, newValue) => {\r\n                setFirst(newValue);\r\n                setIsValueSelected(true);\r\n              }}\r\n              autoSelect\r\n              renderOption={(props, result) => (\r\n                <Box {...props} key={result.id}>\r\n                  {result.id} {result.description}\r\n                </Box>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  onChange={handleChange}\r\n                  placeholder=\"filter\"\r\n                />\r\n              )}\r\n            />\r\n        </Box>\r\n           <Box>\r\n             {\" \"}\r\n             <Typography\r\n               variant=\"subtitle1\"\r\n               sx={{\r\n                 backgroundColor: \"#c8e2dd\",\r\n                 width: \"168px\",\r\n                 textAlign: \"center\",\r\n                 height: \"37px\",\r\n               }}\r\n             >\r\n               maligant\r\n             </Typography>\r\n           </Box>\r\n           <div className=\"box1\">\r\n             <Box\r\n               sx={{\r\n                 height: \"30px\",\r\n                 width: \"100px\",\r\n                 backgroundColor: \"white\",\r\n                 border: \"1px solid black\",\r\n                 height: \"35px\",\r\n               }}\r\n             ></Box>\r\n           </div>\r\n           <div>\r\n             <Box\r\n               sx={{\r\n                 height: \"30px\",\r\n                 width: \"100px\",\r\n                 backgroundColor: \"white\",\r\n                 border: \"1px solid black\",\r\n                 height: \"35px\",\r\n               }}\r\n             ></Box>\r\n           </div>\r\n\r\n           <Box>\r\n             <Typography\r\n               variant=\"subtitle1\"\r\n               color=\"black\"\r\n               sx={{\r\n                 backgroundColor: \"#c8e2dd\",\r\n                 width: \"180px\",\r\n                 textAlign: \"center\",\r\n                 height: \"37px\",\r\n               }}\r\n             >\r\n               Behaviour\r\n             </Typography>\r\n           </Box>\r\n         </Stack>\r\n       </Box>\r\n     </div>\r\n   </div>\r\n            </TableRow>\r\n\r\n\r\n          </TableHead>\r\n          \r\n          <TableHead sx={{height:\"20px\",border: \"1px solid grey\"}}>\r\n\r\n            <TableRow sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n                \r\n              }}>\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}>N-Term</StyledTableCell>\r\n\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">Primary</StyledTableCell>\r\n\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">Secondary</StyledTableCell>\r\n\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">Cainsitu</StyledTableCell>\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">benigin</StyledTableCell>\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">unsertain</StyledTableCell>\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              \r\n              }}align=\"right\">unspecified</StyledTableCell>\r\n\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {neo?.map((row) => (\r\n              <StyledTableRow key={row.id}>\r\n                <StyledTableCell component=\"th\" scope=\"row\">\r\n                  {row.title}\r\n                </StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">{codes[0]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[1]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[2]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[3]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[4]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[5]}</StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n*/\nimport * as React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { Autocomplete, Box, Stack, TextField, Typography } from \"@mui/material\";\nimport { Pagin } from \"./pagination\";\nimport { Fragment } from \"react\";\nimport { useState } from \"react\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledTableCell = styled(TableCell)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n      backgroundColor: \"#90B2D8\",\n      height: 1\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n      height: 1\n    }\n  };\n});\n_c = StyledTableCell;\nconst StyledTableRow = styled(TableRow)(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n      height: 1\n    },\n    // hide last border\n    \"&:last-child td, &:last-child th\": {\n      border: 0,\n      height: 1\n    }\n  };\n});\n_c2 = StyledTableRow;\nexport default function NeoplasmTable() {\n  _s();\n  const [neo, setNeo] = useState(null);\n  const [codes, setCodes] = useState([]);\n  React.useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        if (global.values && global.values.code) {\n          const response = await fetch(`/codes/${global.values.code}/neoplasm`);\n          if (response.ok) {\n            const data = await response.json();\n            setNeo(data);\n\n            // Split the code string and set the values in the state\n            const codeValues = global.values.code.split(\",\");\n            setCodes(codeValues);\n          } else {\n            console.error(\"Failed to fetch data\");\n          }\n        } else {\n          console.error(\"Failed to fetch data\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    fetchBooks();\n  }, [global.values.code]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        height: \"20px\",\n        width: \"100%\",\n        textAlign: \"left\",\n        mt: \"200px\",\n        ml: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Pagin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        mt: \"60px\",\n        display: \"flex\",\n        position: \"absolute\",\n        width: \"830px\",\n        ml: \"-115px\",\n        height: \"400px\",\n        overflowY: \"scroll\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: \"100px\",\n          height: \"450px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n          sx: {\n            height: \"20px\",\n            border: \"1px solid grey\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: neo === null || neo === void 0 ? void 0 : neo.map(row => /*#__PURE__*/_jsxDEV(StyledTableRow, {\n            children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n              component: \"th\",\n              scope: \"row\",\n              children: row.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 17\n            }, this), codes.map((code, index) => /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              sx: {\n                border: \"1px solid grey\",\n                height: \"20px\"\n              },\n              align: \"right\",\n              children: code\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 19\n            }, this))]\n          }, row.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n/*\r\nimport * as React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n    backgroundColor: \"#90B2D8\",\r\n    height: 1,\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    height: 1,\r\n  },\r\n}));\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:nth-of-type(odd)\": {\r\n    backgroundColor: theme.palette.action.hover,\r\n    height: 1,\r\n  },\r\n  // hide last border\r\n  \"&:last-child td, &:last-child th\": {\r\n    border: 0,\r\n    height: 1,\r\n  },\r\n}));\r\n\r\nexport default function NeoplasmTable() {\r\n  const [neo, setNeo] = useState(null);\r\n  const [codes, setCodes] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\r\n\r\n  useEffect(() => {\r\n    const fetchNeoplasmData = async () => {\r\n      try {\r\n        if (global.values && global.values.code) {\r\n          const response = await fetch(`/codes/${global.values.code}/neoplasm`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setNeo(data);\r\n            const codeValues = global.values.code.split(\",\");\r\n            setCodes(codeValues);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchNeoplasmData();\r\n  }, [global.values.code]);\r\n\r\n  return (\r\n    <>\r\n      <TableContainer\r\n        sx={{\r\n          mt: \"60px\",\r\n          display: \"flex\",\r\n          position: \"absolute\",\r\n          width: \"830px\",\r\n          ml: \"-115px\",\r\n          height: \"400px\",\r\n          overflowY: \"scroll\",\r\n        }}\r\n      >\r\n        <Table sx={{ minWidth: \"100px\", height: \"450px\" }}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell>N-Term</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Primary</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Secondary</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Cainsitu</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Benign</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Uncertain</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Unspecified</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {neo?.map((row, index) => (\r\n              <StyledTableRow key={row.id}>\r\n                <StyledTableCell component=\"th\" scope=\"row\">\r\n                  {row.title}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[0]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[1]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[2]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[3]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[4]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[5]}\r\n                </StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n*/\n_s(NeoplasmTable, \"A/wJsd47+2brZmRpxlHVTQCcPM8=\");\n_c3 = NeoplasmTable;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledTableCell\");\n$RefreshReg$(_c2, \"StyledTableRow\");\n$RefreshReg$(_c3, \"NeoplasmTable\");","map":{"version":3,"names":["React","styled","Table","TableBody","TableCell","tableCellClasses","TableContainer","TableHead","TableRow","Autocomplete","Box","Stack","TextField","Typography","Pagin","Fragment","useState","SearchIcon","jsxDEV","_jsxDEV","_Fragment","StyledTableCell","_ref","theme","head","backgroundColor","palette","common","black","color","white","height","body","fontSize","_c","StyledTableRow","_ref2","action","hover","border","_c2","NeoplasmTable","_s","neo","setNeo","codes","setCodes","useEffect","fetchBooks","global","values","code","response","fetch","ok","data","json","codeValues","split","console","error","children","sx","width","textAlign","mt","ml","fileName","_jsxFileName","lineNumber","columnNumber","display","position","overflowY","minWidth","map","row","component","scope","title","index","align","id","_c3","$RefreshReg$"],"sources":["D:/Reactjs/emedfrontend/src/components/NeoplasmTable.js"],"sourcesContent":["/*\r\nimport * as React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\n\r\nimport { Autocomplete, Box, Stack, TextField, Typography } from \"@mui/material\";\r\nimport { Pagin } from \"./pagination\";\r\nimport { Fragment } from \"react\";\r\nimport { useState } from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\nbackgroundColor:\"#90B2D8\",\r\nheight:1\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    height:1\r\n  },\r\n}));\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:nth-of-type(odd)\": {\r\n    backgroundColor: theme.palette.action.hover,\r\n    height:1\r\n  },\r\n  // hide last border\r\n  \"&:last-child td, &:last-child th\": {\r\n    border: 0,\r\n    height:1\r\n  },\r\n}));\r\n\r\n\r\nexport default function NeoplasmTable() {\r\n  console.log(\"neo enter\");\r\n  console.log(global.values.code);\r\n  const [neo, setNeo] = useState(null);\r\n  const [codes, setCodes] = useState([]);\r\n  React.useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try  {\r\n        if (global.values && global.values.code) {\r\n          const response = await fetch(`/codes/${global.values.code}/neoplasm`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setNeo(data);\r\n            const codeValues = global.values.code.split(\",\");\r\n            setCodes(codeValues);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }else {\r\n          console.error(\"Failed to fetch data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values.code]);\r\n  console.log(\"our neo is\", neo);\r\n  const [result, setResult] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [first, setFirst] = useState(\"\");\r\n  const [word, setWord] = useState(\"\");\r\n  const [isValueSelected, setIsValueSelected] = useState(false);\r\n  function handleChange(e) {\r\n    setWord(e.target.value);\r\n  }\r\n  return (\r\n    <>\r\n    <Box\r\n              sx={{\r\n                height: \"20px\",\r\n                width: \"100%\",\r\n                textAlign: \"left\",\r\n                mt: \"200px\",\r\n                ml: \"10px\",\r\n              }}\r\n            >\r\n             <Pagin/>    \r\n            </Box>\r\n      <TableContainer\r\n        sx={{\r\n          mt: \"60px\",\r\n          display: \"flex\",\r\n          position: \"absolute\",\r\n          width: \"830px\",\r\n          ml: \"-115px\",\r\n          height: \"400px\",\r\n          overflowY:\"scroll\"\r\n          \r\n        }}\r\n      >\r\n        <Table sx={{ minWidth: \"100px\", height: \"450px\" }}>\r\n          <TableHead>\r\n            <TableRow>\r\n\r\n\r\n            <div >\r\n     \r\n     <div className=\"table\">\r\n       <Box\r\n         sx={{\r\n           width: \"100px\",\r\n           height: \"20%\",\r\n        \r\n         }}\r\n       >\r\n         <Stack direction={\"row\"}>\r\n         <Box>\r\n            <Autocomplete\r\n              id=\"users\"\r\n              defaultValue={null}\r\n              getOptionLabel={(result) => `${result.id} ${result.description}`}\r\n          options={result}\r\n              sx={{\r\n                width: \"150px\",\r\n                backgroundColor: \"white\",\r\n                mt: \"0.5px\",\r\n                ml: \"0.1px\",\r\n                display: \"inline-block\",\r\n                \"& input\": {\r\n                  height: \"5px\",\r\n                  bgcolor: \"background.paper\",\r\n                  color: (theme) =>\r\n                    theme.palette.getContrastText(\r\n                      theme.palette.background.paper\r\n                    ),\r\n                },\r\n              }}\r\n              isoptionequalToValue={(option, value) =>\r\n                option.description === value.description\r\n              }\r\n              noOptionsText={\"PLEASE ENTER VALID CODES\"}\r\n              open={open}\r\n              onInputChange={(_, value) => {\r\n                if (value.length === 0) {\r\n                  if (open) setOpen(false);\r\n                } else {\r\n                  if (!open) setOpen(true);\r\n                }\r\n              }}\r\n              onClose={() => setOpen(false)}\r\n              popupIcon={\r\n                <SearchIcon sx={{ marginLeft:\"60px\" }} />\r\n              }\r\n              onChange={(event, newValue) => {\r\n                setFirst(newValue);\r\n                setIsValueSelected(true);\r\n              }}\r\n              autoSelect\r\n              renderOption={(props, result) => (\r\n                <Box {...props} key={result.id}>\r\n                  {result.id} {result.description}\r\n                </Box>\r\n              )}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  onChange={handleChange}\r\n                  placeholder=\"filter\"\r\n                />\r\n              )}\r\n            />\r\n        </Box>\r\n           <Box>\r\n             {\" \"}\r\n             <Typography\r\n               variant=\"subtitle1\"\r\n               sx={{\r\n                 backgroundColor: \"#c8e2dd\",\r\n                 width: \"168px\",\r\n                 textAlign: \"center\",\r\n                 height: \"37px\",\r\n               }}\r\n             >\r\n               maligant\r\n             </Typography>\r\n           </Box>\r\n           <div className=\"box1\">\r\n             <Box\r\n               sx={{\r\n                 height: \"30px\",\r\n                 width: \"100px\",\r\n                 backgroundColor: \"white\",\r\n                 border: \"1px solid black\",\r\n                 height: \"35px\",\r\n               }}\r\n             ></Box>\r\n           </div>\r\n           <div>\r\n             <Box\r\n               sx={{\r\n                 height: \"30px\",\r\n                 width: \"100px\",\r\n                 backgroundColor: \"white\",\r\n                 border: \"1px solid black\",\r\n                 height: \"35px\",\r\n               }}\r\n             ></Box>\r\n           </div>\r\n\r\n           <Box>\r\n             <Typography\r\n               variant=\"subtitle1\"\r\n               color=\"black\"\r\n               sx={{\r\n                 backgroundColor: \"#c8e2dd\",\r\n                 width: \"180px\",\r\n                 textAlign: \"center\",\r\n                 height: \"37px\",\r\n               }}\r\n             >\r\n               Behaviour\r\n             </Typography>\r\n           </Box>\r\n         </Stack>\r\n       </Box>\r\n     </div>\r\n   </div>\r\n            </TableRow>\r\n\r\n\r\n          </TableHead>\r\n          \r\n          <TableHead sx={{height:\"20px\",border: \"1px solid grey\"}}>\r\n\r\n            <TableRow sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n                \r\n              }}>\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}>N-Term</StyledTableCell>\r\n\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">Primary</StyledTableCell>\r\n\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">Secondary</StyledTableCell>\r\n\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">Cainsitu</StyledTableCell>\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">benigin</StyledTableCell>\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">unsertain</StyledTableCell>\r\n\r\n              <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              \r\n              }}align=\"right\">unspecified</StyledTableCell>\r\n\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {neo?.map((row) => (\r\n              <StyledTableRow key={row.id}>\r\n                <StyledTableCell component=\"th\" scope=\"row\">\r\n                  {row.title}\r\n                </StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }}align=\"right\">{codes[0]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[1]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[2]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[3]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[4]}</StyledTableCell>\r\n                <StyledTableCell sx={{\r\n                border: \"1px solid grey\",\r\n                height:\"20px\"\r\n              }} align=\"right\">{codes[5]}</StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n*/\r\nimport * as React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\n\r\nimport { Autocomplete, Box, Stack, TextField, Typography } from \"@mui/material\";\r\nimport { Pagin } from \"./pagination\";\r\nimport { Fragment } from \"react\";\r\nimport { useState } from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n    backgroundColor: \"#90B2D8\",\r\n    height: 1,\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    height: 1,\r\n  },\r\n}));\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:nth-of-type(odd)\": {\r\n    backgroundColor: theme.palette.action.hover,\r\n    height: 1,\r\n  },\r\n  // hide last border\r\n  \"&:last-child td, &:last-child th\": {\r\n    border: 0,\r\n    height: 1,\r\n  },\r\n}));\r\n\r\nexport default function NeoplasmTable() {\r\n  const [neo, setNeo] = useState(null);\r\n  const [codes, setCodes] = useState([]);\r\n  React.useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (global.values && global.values.code) {\r\n          const response = await fetch(\r\n            `/codes/${global.values.code}/neoplasm`\r\n          );\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setNeo(data);\r\n\r\n            // Split the code string and set the values in the state\r\n            const codeValues = global.values.code.split(\",\");\r\n            setCodes(codeValues);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        } else {\r\n          console.error(\"Failed to fetch data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values.code]);\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          height: \"20px\",\r\n          width: \"100%\",\r\n          textAlign: \"left\",\r\n          mt: \"200px\",\r\n          ml: \"10px\",\r\n        }}\r\n      >\r\n        <Pagin />\r\n      </Box>\r\n      <TableContainer\r\n        sx={{\r\n          mt: \"60px\",\r\n          display: \"flex\",\r\n          position: \"absolute\",\r\n          width: \"830px\",\r\n          ml: \"-115px\",\r\n          height: \"400px\",\r\n          overflowY: \"scroll\",\r\n        }}\r\n      >\r\n        <Table sx={{ minWidth: \"100px\", height: \"450px\" }}>\r\n          <TableHead>\r\n            <TableRow>\r\n              {/* Rest of your code */}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableHead sx={{ height: \"20px\", border: \"1px solid grey\" }}>\r\n            {/* Rest of your code */}\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            {neo?.map((row) => (\r\n              <StyledTableRow key={row.id}>\r\n                <StyledTableCell component=\"th\" scope=\"row\">\r\n                  {row.title}\r\n                </StyledTableCell>\r\n                {codes.map((code, index) => (\r\n                  <StyledTableCell\r\n                    key={index}\r\n                    sx={{\r\n                      border: \"1px solid grey\",\r\n                      height: \"20px\",\r\n                    }}\r\n                    align=\"right\"\r\n                  >\r\n                    {code}\r\n                  </StyledTableCell>\r\n                ))}\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n\r\n/*\r\nimport * as React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n    backgroundColor: \"#90B2D8\",\r\n    height: 1,\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    height: 1,\r\n  },\r\n}));\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:nth-of-type(odd)\": {\r\n    backgroundColor: theme.palette.action.hover,\r\n    height: 1,\r\n  },\r\n  // hide last border\r\n  \"&:last-child td, &:last-child th\": {\r\n    border: 0,\r\n    height: 1,\r\n  },\r\n}));\r\n\r\nexport default function NeoplasmTable() {\r\n  const [neo, setNeo] = useState(null);\r\n  const [codes, setCodes] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\r\n\r\n  useEffect(() => {\r\n    const fetchNeoplasmData = async () => {\r\n      try {\r\n        if (global.values && global.values.code) {\r\n          const response = await fetch(`/codes/${global.values.code}/neoplasm`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setNeo(data);\r\n            const codeValues = global.values.code.split(\",\");\r\n            setCodes(codeValues);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchNeoplasmData();\r\n  }, [global.values.code]);\r\n\r\n  return (\r\n    <>\r\n      <TableContainer\r\n        sx={{\r\n          mt: \"60px\",\r\n          display: \"flex\",\r\n          position: \"absolute\",\r\n          width: \"830px\",\r\n          ml: \"-115px\",\r\n          height: \"400px\",\r\n          overflowY: \"scroll\",\r\n        }}\r\n      >\r\n        <Table sx={{ minWidth: \"100px\", height: \"450px\" }}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell>N-Term</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Primary</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Secondary</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Cainsitu</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Benign</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Uncertain</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Unspecified</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {neo?.map((row, index) => (\r\n              <StyledTableRow key={row.id}>\r\n                <StyledTableCell component=\"th\" scope=\"row\">\r\n                  {row.title}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[0]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[1]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[2]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[3]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[4]}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {codes[5]}\r\n                </StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n*/\r\n\r\n\r\n"],"mappingssBAAsB;AAC7C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,SAAS,IAAIC,gBAAgB,QAAQ,yBAAyB;AACrE,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAE7C,SAASC,YAAY,EAAEC,GAAG,EAAEC,KAAK,EAAEC,SAAS,EAAEC,UAAU,QAAQ,eAAe;AAC/E,SAASC,KAAK,QAAQ,cAAc;AACpC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAJ,QAAA,IAAAK,SAAA;AAEpD,MAAMC,eAAe,GAAGpB,MAAM,CAACG,SAAS,CAAC,CAACkB,IAAA;EAAA,IAAC;IAAEC;EAAM,CAAC,GAAAD,IAAA;EAAA,OAAM;IACxD,CAAE,KAAIjB,gBAAgB,CAACmB,IAAK,EAAC,GAAG;MAC9BC,eAAe,EAAEF,KAAK,CAACG,OAAO,CAACC,MAAM,CAACC,KAAK;MAC3CC,KAAK,EAAEN,KAAK,CAACG,OAAO,CAACC,MAAM,CAACG,KAAK;MACjCL,eAAe,EAAE,SAAS;MAC1BM,MAAM,EAAE;IACV,CAAC;IACD,CAAE,KAAI1B,gBAAgB,CAAC2B,IAAK,EAAC,GAAG;MAC9BC,QAAQ,EAAE,EAAE;MACZF,MAAM,EAAE;IACV;EACF,CAAC;AAAA,CAAC,CAAC;AAACG,EAAA,GAXEb,eAAe;AAYrB,MAAMc,cAAc,GAAGlC,MAAM,CAACO,QAAQ,CAAC,CAAC4B,KAAA;EAAA,IAAC;IAAEb;EAAM,CAAC,GAAAa,KAAA;EAAA,OAAM;IACtD,oBAAoB,EAAE;MACpBX,eAAe,EAAEF,KAAK,CAACG,OAAO,CAACW,MAAM,CAACC,KAAK;MAC3CP,MAAM,EAAE;IACV,CAAC;IACD;IACA,kCAAkC,EAAE;MAClCQ,MAAM,EAAE,CAAC;MACTR,MAAM,EAAE;IACV;EACF,CAAC;AAAA,CAAC,CAAC;AAACS,GAAA,GAVEL,cAAc;AAYpB,eAAe,SAASM,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACtC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAAC6B,KAAK,EAAEC,QAAQ,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACtChB,KAAK,CAAC+C,SAAS,CAAC,MAAM;IACpB,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,IAAIC,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,CAACC,IAAI,EAAE;UACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,UAASJ,MAAM,CAACC,MAAM,CAACC,IAAK,WAC/B,CAAC;UACD,IAAIC,QAAQ,CAACE,EAAE,EAAE;YACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;YAClCZ,MAAM,CAACW,IAAI,CAAC;;YAEZ;YACA,MAAME,UAAU,GAAGR,MAAM,CAACC,MAAM,CAACC,IAAI,CAACO,KAAK,CAAC,GAAG,CAAC;YAChDZ,QAAQ,CAACW,UAAU,CAAC;UACtB,CAAC,MAAM;YACLE,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;UACvC;QACF,CAAC,MAAM;UACLD,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;QACvC;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IACDZ,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACC,MAAM,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC;EAExB,oBACEhC,OAAA,CAAAC,SAAA;IAAAyC,QAAA,gBACE1C,OAAA,CAACT,GAAG;MACFoD,EAAE,EAAE;QACF/B,MAAM,EAAE,MAAM;QACdgC,KAAK,EAAE,MAAM;QACbC,SAAS,EAAE,MAAM;QACjBC,EAAE,EAAE,OAAO;QACXC,EAAE,EAAE;MACN,CAAE;MAAAL,QAAA,eAEF1C,OAAA,CAACL,KAAK;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNnD,OAAA,CAACb,cAAc;MACbwD,EAAE,EAAE;QACFG,EAAE,EAAE,MAAM;QACVM,OAAO,EAAE,MAAM;QACfC,QAAQ,EAAE,UAAU;QACpBT,KAAK,EAAE,OAAO;QACdG,EAAE,EAAE,QAAQ;QACZnC,MAAM,EAAE,OAAO;QACf0C,SAAS,EAAE;MACb,CAAE;MAAAZ,QAAA,eAEF1C,OAAA,CAACjB,KAAK;QAAC4D,EAAE,EAAE;UAAEY,QAAQ,EAAE,OAAO;UAAE3C,MAAM,EAAE;QAAQ,CAAE;QAAA8B,QAAA,gBAChD1C,OAAA,CAACZ,SAAS;UAAAsD,QAAA,eACR1C,OAAA,CAACX,QAAQ;YAAA2D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eAEZnD,OAAA,CAACZ,SAAS;UAACuD,EAAE,EAAE;YAAE/B,MAAM,EAAE,MAAM;YAAEQ,MAAM,EAAE;UAAiB;QAAE;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEjD,CAAC,eAEZnD,OAAA,CAAChB,SAAS;UAAA0D,QAAA,EACPlB,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEgC,GAAG,CAAEC,GAAG,iBACZzD,OAAA,CAACgB,cAAc;YAAA0B,QAAA,gBACb1C,OAAA,CAACE,eAAe;cAACwD,SAAS,EAAC,IAAI;cAACC,KAAK,EAAC,KAAK;cAAAjB,QAAA,EACxCe,GAAG,CAACG;YAAK;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACK,CAAC,EACjBzB,KAAK,CAAC8B,GAAG,CAAC,CAACxB,IAAI,EAAE6B,KAAK,kBACrB7D,OAAA,CAACE,eAAe;cAEdyC,EAAE,EAAE;gBACFvB,MAAM,EAAE,gBAAgB;gBACxBR,MAAM,EAAE;cACV,CAAE;cACFkD,KAAK,EAAC,OAAO;cAAApB,QAAA,EAEZV;YAAI,GAPA6B,KAAK;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAQK,CAClB,CAAC;UAAA,GAfiBM,GAAG,CAACM,EAAE;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAgBX,CACjB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM,CAAC;EAAA,eACjrHA5B,EAAA,CA5FwBD,aAAa;AAAA0C,GAAA,GAAb1C,aAAa;AAAA,IAAAP,EAAA,EAAAM,GAAA,EAAA2C,GAAA;AAAAC,YAAA,CAAAlD,EAAA;AAAAkD,YAAA,CAAA5C,GAAA;AAAA4C,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}